generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADDOW_DATABASE_URL")
}

model Qualification {
  id            String   @id @default(cuid())
  userId        String
  name          String
  qualification String
  city          String?
  description   String?  @db.Text
  from          String?
  to            String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  image         String?
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Qualification_userId_fkey")
}

model Experience {
  id           String    @id @default(cuid())
  userId       String
  title        String
  company      String
  from         String
  to           String?
  description  String?   @db.Text
  stillWorking String    @default("false")
  image        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @default(now())
  User         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Experience_userId_fkey")
}

model Invites {
  id               String   @id
  createdAt        DateTime @default(now())
  expiresAt        DateTime
  updatedAt        DateTime?
  userId           String
  userUserName     String?
  destinationEmail String
  destinationName  String?
  opened           Boolean  @default(false)
  User             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Invites_userId_fkey")
}

model User {
  id                String          @id @default(cuid())
  email             String          @unique
  firstName         String?
  lastName          String?
  username          String          @unique
  password          String
  role              String          @default("user")
  resetToken        String?         @unique
  resetTokenExpiry  DateTime?
  verified          Boolean         @default(false)
  verifiedAt        Int?
  verifyToken       String?         @unique
  verifyTokenExpiry Int?
  mobile            String?
  avatar            String?
  address           String?
  city              String?
  state             String?
  country           String?
  zip               String?
  address2          String?
  bio               String?        @db.Text
  website           String?
  linkedin          String?
  twitter           String?
  facebook          String?
  instagram         String?
  github            String?
  youtube           String?
  twitch            String?
  discord           String?
  age               Int?
  createdAt         DateTime?       @default(now())
  updatedAt         DateTime?       @default(now())
  lastLogin         DateTime?
  lastLoginFrom     String?
  Experience        Experience[]
  Invite            Invites[]
  Qualifications    Qualification[]
  UserNotifications UserNotification[]
  UserSettings      UserSetting[]
}


// The model inviteId is defined in the schema to save the serial number of the invite. This is used to generate the invite code.

model inviteId {
  id        Int   
  name      String @default("invite") @unique
}

model UserNotification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "UserNotification_userId_fkey")
}

model UserSetting {
  id        String   @id @default(cuid())
  userId    String
  setting   String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "UserSetting_userId_fkey")
}
