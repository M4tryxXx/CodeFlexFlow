generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADDOW_DATABASE_URL")
}

//**
//    * Account models *
//    * User model *
//**

model user {
  id                  String                @id @default(cuid())
  email               String                @unique
  username            String                @unique
  password            String
  role                String                @default("user")
  reset_token         String?               @unique
  reset_token_expiry  DateTime?
  verified            Boolean               @default(false)
  verified_at         DateTime?
  verify_token        String?               @unique
  verify_token_expiry DateTime?
  avatar              String?
  created_at          DateTime?             @default(now())
  updated_at          DateTime?             @default(now())
  lastLogin           DateTime?
  lastLogin_from      String?
  settings            user_settings?
  notifications       user_notifications[] @relation("ToUser")
  sent_notifications  user_notifications[] @relation("FromUser")
  qualifications      user_qualifications[]
  experiences         user_experiences[]
  skills              user_skills[]
  invites             user_invites[]
  personal_info       user_personal_info?
  social_media        user_socials?
}

//**
//    * Account models *
//    * User Notifications Model *
//**

model user_notifications {
  id           String   @id @default(cuid())
  from_user_id      String? 
  to_user_id        String 
  subject     String
  message String
  type         String?
  read         Boolean? @default(false)
  created_at   DateTime @default(now())
  from        String?
  to          String?
  from_user         user?     @relation("FromUser", fields: [from_user_id], references: [id], onDelete: Cascade)
  to_user           user     @relation("ToUser", fields: [to_user_id], references: [id], onDelete: Cascade)

  @@index([from_user_id], map: "Notification_from_user_id_fkey")
  @@index([to_user_id], map: "Notification_to_user_id_fkey")

}

//**
//    * Account models *
//    * User Settings Model *
//**

model user_settings {
  id         String    @id @default(cuid())
  user_id    String    @unique
  setting    String?
  value      String?
  setting1   String?
  value1     String?
  setting2   String?
  value2     String?
  setting3   String?
  value3     String?
  setting4   String?
  value4     String?
  setting5   String?
  value5     String?
  updated_at DateTime? @default(now())
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "UserSetting_user_id_fkey")
}

//**
//    * CV models *
//    * Personal Information model *
//**

model user_personal_info {
  id         String    @id @default(cuid())
  user_id    String    @unique
  first_name String?
  last_name  String?
  age        Int?
  city       String?
  state      String?
  country    String?
  zip        String?
  bio        String?   @db.Text
  phone      String?
  email      String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  image      String?
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "PersonalInfo_user_id_fkey")
}

//**
//    * Cv models *
//    * Social model *

model user_socials {
  id         String    @id @default(cuid())
  user_id    String    @unique
  website    String?
  linkedin   String?
  twitter    String?
  facebook   String?
  instagram  String?
  github     String?
  youtube    String?
  twitch     String?
  discord    String?
  snapchat   String?
  tiktok     String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "Social_user_id_fkey")
}

//**
//    * Cv models *
//    * Qualification model *
//**

model user_qualifications {
  id          String    @id @default(cuid())
  user_id     String
  school      String
  city        String
  degree      String
  field       String
  description String?   @db.Text
  start_date  DateTime
  end_date    DateTime?
  created_at  DateTime? @default(now())
  updated_at  DateTime? @default(now())
  image       String?
  user        user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "Qualification_user_id_fkey")
}

//**
//    * Cv models *
//    * Experience model *
//**

model user_experiences {
  id           String    @id @default(cuid())
  user_id      String
  position     String
  company      String
  field        String?
  city         String
  start_date   DateTime
  end_date     DateTime?
  description  String?   @db.Text
  working_now  Boolean?  @default(false)
  company_logo String?
  created_at   DateTime? @default(now())
  updated_at   DateTime? @default(now())
  user         user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "Experience_user_id_fkey")
}

//**
//    * CV models *
//    * User Abilities model *
//**

model user_skills {
  id          String    @id @default(cuid())
  user_id     String
  name        String
  description String?   @db.Text
  level       Int?      @default(0)
  created_at  DateTime? @default(now())
  user        user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "UserAbilities_user_id_fkey")
}

//**
//    * Invite models *
//    * Invites sent *
//**

model user_invites {
  id                String    @id
  user_id           String
  created_at        DateTime  @default(now())
  expires_at        DateTime
  opened_at         DateTime?
  user_userName     String?
  destination_email String
  at_company_name  String?
  opened            Boolean   @default(false)
  user              user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "Invites_user_id_fkey")
}

// The model invite_id is defined in the schema to save the serial number of the invite so they will not overlap.  This is used to generate the invite code.

model invite_id {
  id   Int
  name String @unique @default("invite")
}

//********************************************************************************
